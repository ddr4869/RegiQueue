// Code generated by ent, DO NOT EDIT.

package course

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ddr4869/RegiQueue/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldID, id))
}

// CourseName applies equality check predicate on the "course_name" field. It's identical to CourseNameEQ.
func CourseName(v int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseName, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldUserID, v))
}

// CourseNameEQ applies the EQ predicate on the "course_name" field.
func CourseNameEQ(v int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseName, v))
}

// CourseNameNEQ applies the NEQ predicate on the "course_name" field.
func CourseNameNEQ(v int) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldCourseName, v))
}

// CourseNameIn applies the In predicate on the "course_name" field.
func CourseNameIn(vs ...int) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldCourseName, vs...))
}

// CourseNameNotIn applies the NotIn predicate on the "course_name" field.
func CourseNameNotIn(vs ...int) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldCourseName, vs...))
}

// CourseNameGT applies the GT predicate on the "course_name" field.
func CourseNameGT(v int) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldCourseName, v))
}

// CourseNameGTE applies the GTE predicate on the "course_name" field.
func CourseNameGTE(v int) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldCourseName, v))
}

// CourseNameLT applies the LT predicate on the "course_name" field.
func CourseNameLT(v int) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldCourseName, v))
}

// CourseNameLTE applies the LTE predicate on the "course_name" field.
func CourseNameLTE(v int) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldCourseName, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Course) predicate.Course {
	return predicate.Course(sql.NotPredicates(p))
}
